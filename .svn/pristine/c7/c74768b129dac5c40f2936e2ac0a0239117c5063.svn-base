package com.cardprototype.page.battle;

import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.cardprototype.core.domain.EventQueue;
import com.cardprototype.core.domain.Player;
import com.cardprototype.core.domain.ability.Ability;
import com.cardprototype.core.domain.battle.helper.RoundChanges;
import com.cardprototype.core.repository.EventQueueRepository;
import com.cardprototype.core.repository.PlayerRepository;
import com.cardprototype.page.AbstractController;
import com.cardprototype.task.AbilityEffectService;

/**
 * Controller in charge of {@link Ability} effects during a battle
 * @author Kevin Deyne
 *
 */
@Controller
public class AbilityController extends AbstractController {

	@Autowired
	private EventQueueRepository eventQueueRepository;

	@Autowired
	private AbilityEffectService abilityEffectService;

	@Autowired
	private PlayerRepository playerRepository;

	public static final String SKILL_ACTION = "/skill-action/{abilityId}";
	public static final String ENEMY_ACTION = "/skill-action/enemy/{round}";

	@RequestMapping(value={SKILL_ACTION})
	public @ResponseBody RoundChanges skillAction(HttpServletRequest request, HttpServletResponse response, Model model, @PathVariable String abilityId) {
		int round = determineRound(request, response);
		this.abilityEffectService.useAbility(abilityId, round, true);
		RoundChanges roundChanges = buildResponse(round, true);
		return roundChanges;
	}

	@RequestMapping(value={ENEMY_ACTION})
	public @ResponseBody RoundChanges enemyAction(HttpServletRequest request, HttpServletResponse response, Model model, @PathVariable String round) {
		int roundInt = Integer.parseInt(round);
		this.abilityEffectService.enemyMove(roundInt);
		RoundChanges roundChanges = buildResponse(roundInt, false);
		clearEarliestEventQueue(request, response, roundInt);
		return roundChanges;
	}

	/**
	 * Builds the single 'changed' response, concatenated from all the items on this round on the event queue
	 * Also attaches the logic for the next attack, so we only have to go once to the server and back
	 *
	 * @param abilityId - the {@link Ability} just used
	 * @param round - the current round, pre-determined
	 * @param asPlayer
	 * @return {@link Map} with response
	 */
	private RoundChanges buildResponse(int round, boolean asPlayer) {
		return this.abilityEffectService.getRoundChanges(round, asPlayer);
	}

	/**
	 * Determines what round we're in
	 * @param earliestEvent
	 * @return
	 */
	private int determineRound(HttpServletRequest request, HttpServletResponse response) {
		Player player = getPlayer(request, response);
		int round = player.getRound();
		return round;
	}

	/**
	 * Since all concatenations are done, this round is not neccesary any more
	 * @param round to be deleted
	 */
	private void clearEarliestEventQueue(HttpServletRequest request, HttpServletResponse response, int round) {
		Player player = getPlayer(request, response);

		List<EventQueue> eventQueues = this.eventQueueRepository.findByPlayerIdAndRound(player.getId(), round);
		this.eventQueueRepository.delete(eventQueues);

		player.setRound(round+1);
		this.playerRepository.save(player);
	}
}