package com.cardprototype.page.station;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;

import com.cardprototype.bootstrap.loaders.AreaLoader;
import com.cardprototype.bootstrap.pool.StationPool;
import com.cardprototype.core.domain.Area;
import com.cardprototype.core.domain.Character;
import com.cardprototype.core.domain.MissionStateCode;
import com.cardprototype.core.domain.POI;
import com.cardprototype.core.domain.Station;
import com.cardprototype.core.domain.StationName;
import com.cardprototype.core.repository.AreaRepository;
import com.cardprototype.core.repository.CharacterRepository;
import com.cardprototype.core.repository.POIRepository;
import com.cardprototype.page.AbstractController;

/**
 * Initial station page setup
 * @author Kevin Deyne
 */
@Controller
public class StationController extends AbstractController {

	public static final String TEST = "/delta-station/barracks";

	@Autowired
	private AreaRepository areaRepository;

	@Autowired
	private CharacterRepository characterRepository;

	@Autowired
	private POIRepository poiRepository;

	@RequestMapping(value={TEST})
	public String stationPage(HttpServletRequest request, Model model) {

		//load up station where player is current located
		//characters in station
		Station station = StationPool.getStationPool().generateNewStation(StationName.DELTA);

		Area area = this.areaRepository.findOne(AreaLoader.DELTA_BAR);

		MissionStateCode missionStateCode = MissionStateCode.TUTORIAL1;

		model.addAttribute("stationName", station.getName());
		model.addAttribute("areaName", area.getName());
		model.addAttribute("stationDescription", station.getDescription());
		model.addAttribute("areaDescription", area.getDescription());

		List<Character> characters = buildCharacters(area, missionStateCode);
		List<POI> pois = buildPOIs(area, missionStateCode);

		model.addAttribute("characters", characters);
		model.addAttribute("pois", pois);

		return "station/index";
	}

	private List<POI> buildPOIs(Area area, MissionStateCode missionStateCode) {
		List<POI> pois = this.poiRepository.findByAreaIdAndState(area.getId(), missionStateCode);

		if(pois == null){
			pois = new ArrayList<POI>();
		}

		pois.addAll(this.poiRepository.findByAreaIdAndState(area.getId(), null));
		return pois;
	}

	private List<Character> buildCharacters(Area area, MissionStateCode missionStateCode) {
		List<Character> characters = this.characterRepository.findByAreaIdAndState(area.getId(), missionStateCode);
		if(characters == null){
			characters = new ArrayList<Character>();
		}
		characters.addAll(this.characterRepository.findByAreaIdAndState(area.getId(), null));
		return characters;
	}
}
