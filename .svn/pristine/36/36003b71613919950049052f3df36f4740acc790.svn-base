package com.cardprototype.page;

import java.util.Arrays;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mobile.device.Device;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.authentication.RememberMeServices;

import com.cardprototype.core.domain.Player;
import com.cardprototype.core.domain.security.PlayerUserDetails;
import com.cardprototype.core.repository.PlayerRepository;

public abstract class AbstractController {

	protected boolean isDesktopUser(Device device) {
		return device == null || device.isNormal();
	}


	/**
	 * Helper method to create an absolute URL based on the current Request URI.
	 *
	 * Useful for creating URL variables to use in JSP / JS...
	 *
	 * @param request
	 * @param url
	 * @return
	 */
	public static String createUrl(HttpServletRequest request, String url) {
		return new StringBuffer(getBaseURL(request)).append(url).toString();
	}


	/**
	 * Retrieve the base URL of the deployed web application.
	 *
	 * @param request
	 * @return a String containing the url in the format:
	 *         &lt;scheme&gt;://&lt;servername
	 *         &gt;:&lt;port&gt;&lt;contextpath&gt;/
	 */
	protected static String getBaseURL(HttpServletRequest request) {
		StringBuffer baseUrl = new StringBuffer();
		baseUrl.append(request.getRequestURL().toString().replace(request.getServletPath(), ""));
		return baseUrl.toString();
	}

	@Autowired
	private RememberMeServices rememberMeServices;

	@Autowired
	private PlayerRepository playerRepository;

	protected Player createNewPlayer(HttpServletRequest request, HttpServletResponse response) {
		String playerId = UUID.randomUUID().toString().replace("-", "");

		PlayerUserDetails userDetails = new PlayerUserDetails(playerId, Arrays.asList(new SimpleGrantedAuthority("USER")));
		Authentication authentication = new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());

		SecurityContextHolder.getContext().setAuthentication(authentication);

		this.rememberMeServices.loginSuccess(request, response, authentication);

		Player player = new Player();
		player.setId(playerId);
		return this.playerRepository.save(player);
	}

	protected Player getPlayer(HttpServletRequest request, HttpServletResponse response){
		if("anonymousUser".equals(SecurityContextHolder.getContext().getAuthentication().getPrincipal())){
			return createNewPlayer(request, response);
		} else {
			PlayerUserDetails userDetails = (PlayerUserDetails) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
			return this.playerRepository.findOne(userDetails.getId());
		}
	}
}