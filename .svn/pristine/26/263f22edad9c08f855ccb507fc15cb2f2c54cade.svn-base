package com.cardprototype.bootstrap.loaders;

import java.util.ArrayList;
import java.util.List;

import org.springframework.context.ApplicationListener;
import org.springframework.context.event.ContextRefreshedEvent;
import org.springframework.core.Ordered;
import org.springframework.stereotype.Component;

import com.cardprototype.bootstrap.pool.AbilityPool;
import com.cardprototype.core.domain.RangeType;
import com.cardprototype.core.domain.ability.Ability;
import com.cardprototype.core.domain.ability.AbilityCategory;
import com.cardprototype.core.domain.ability.AbilityType;

/**
 * Loaders are classes that listen for an application start up and then fill
 * either a database or in-memory storage with instances of classes
 * This can be used for either test data or actual objects that only exist in-memory
 *
 * Implementing the {@link Ordered} interface ensures we can control when it is executed
 *
 * This specific class handles the {@link Ability}
 *
 * @author Kevin Deyne
 */
@Component
public class AbilityLoader implements ApplicationListener<ContextRefreshedEvent>, Ordered {

	@Override
	public void onApplicationEvent(ContextRefreshedEvent event) {
		AbilityLoader.setup();
	}

	public static void setup() {
		AbilityPool pool = AbilityPool.getAbilityPool();

		pool.loadUp(AbilityLoader.coolantFluidAbility());
		pool.loadUp(AbilityLoader.flakAbility());
		pool.loadUp(AbilityLoader.gattlingGunAbility());
		pool.loadUp(AbilityLoader.gaussMineAbility());
		pool.loadUp(AbilityLoader.harpoonAbility());
		pool.loadUp(AbilityLoader.overdriveAbility());
	}

	private static Ability addCategories(Ability ability, AbilityCategory... categories) {
		if(ability.getCategories() == null){
			List<AbilityCategory> categoryList = new ArrayList<AbilityCategory>();
			ability.setCategories(categoryList);
		}

		for(AbilityCategory abilityCategory : categories){
			ability.getCategories().add(abilityCategory);
		}

		return ability;
	}

	private static Ability setupDamageDealer(Ability ability, int min, int max, RangeType range) {
		ability.setAbilityType(AbilityType.DAMAGE_DEALER);
		ability.setMinDamage(min);
		ability.setMaxDamage(max);
		ability.setRange(range);

		return ability;
	}

	/**
	 * Determines the order executed
	 */
	@Override
	public int getOrder() {
		return 1;
	}

	/**
	 * Sets up a COOLANT FLUID ability
	 * Resets all recharge rates, buffs defense, removes accuracy bonus
	 * @return {@link Ability}
	 */
	public static Ability coolantFluidAbility() {
		Ability ability = new Ability();

		ability.setId(Ability.COOLANT_FLUID);
		ability.setName("Coolant fluid");
		ability.setDescription("Flushing coolant fluid through your systems will repair some of the overheated systems.");
		ability.setAbilityType(AbilityType.RESET_COOLDOWNS);
		ability.setRange(RangeType.ANY);
		ability.setCooldown(3);

		ability = addCategories(ability, AbilityCategory.KILL_STUN);

		return ability;
	}

	/**
	 * Sets up a GAUSS MINE ability
	 * Emp, disables systems for one turn, recharges increased for all skills (close distsnce), buffs defense
	 * @return {@link Ability}
	 */
	public static Ability gaussMineAbility() {
		Ability ability = new Ability();

		ability.setId(Ability.GAUSS_MINE_DRONE);
		ability.setName("Gauss mine drone");
		ability.setDescription("The Gauss mine drone is a less than lethal option to take down enemy combatants through electro-magnetic pulses fired in an arch.");
		ability.setAbilityType(AbilityType.EMP);
		ability.setRange(RangeType.CLOSE);
		ability.setDefenseBuff(Ability.BUFF_STANDARD);
		ability.setCooldown(3);

		ability = addCategories(ability, AbilityCategory.STUN, AbilityCategory.DEF_BUFF);

		return ability;
	}

	/**
	 * Sets up a FLAK CANNON ability
	 * Scorcher, DOT, several shots with low damage. Buffs accuracy for next shot, lessens defense (mid distance)
	 * @return {@link Ability}
	 */
	public static Ability flakAbility() {
		Ability ability = new Ability();

		ability.setId(Ability.FLAK_CANNON);
		ability.setName("Flammengranat Flak Cannon");
		ability.setDescription("The Flammengranat Flak Cannon fires a barrage of small fuel-propelled scorchers which damage the hull on impact and keeps burning all the way through.");
		ability.setAbilityType(AbilityType.SCORCHER);

		ability.setMinDamage(1);
		ability.setMaxDamage(3);

		ability.setAccBuff(Ability.BUFF_STANDARD); //buffs for 5 ACC
		ability.setDefenseBuff(-Ability.BUFF_STANDARD); //debuffs for 5 DEF
		ability.setLifespan(3); //DOT lasts for 3 turns
		ability.setRange(RangeType.MID);

		ability = addCategories(ability, AbilityCategory.ACC_BUFF, AbilityCategory.SMALL_DAMAGE);

		return ability;
	}

	/**
	 * Sets up a <strong>Rotschild Gattling Gun</strong> ability<br/>
	 * DMG 10<br/>
	 * DEF +1 <br/>
	 * ACC -1<br/>
	 * MID Range<br/>
	 * ACC BASE 80<br/>
	 * @return {@link Ability}
	 */
	public static Ability gattlingGunAbility() {
		Ability ability = new Ability();

		ability.setId(Ability.GATTLING_GUN);
		ability.setName("Rotschild Gattling Gun");
		ability.setDescription("The Rotschild Gattling Gun unleashes a barrage of small fuel-propelled explosives which damage the hull on contact");

		ability = setupDamageDealer(ability, 1, 10, RangeType.MID);

		ability.setDefenseBuff(Ability.BUFF_MINOR);
		ability.setAccBuff(-Ability.BUFF_MINOR);

		ability = addCategories(ability, AbilityCategory.DEF_BUFF, AbilityCategory.BIG_DAMAGE);

		return ability;
	}

	/**
	 * Sets up a HARPOON ability
	 * Brings enemy ship into same region as you (long distance), buffs acc, debuffs defense
	 * @return {@link Ability}
	 */
	public static Ability harpoonAbility() {
		Ability ability = new Ability();

		ability.setId(Ability.HARPOON);
		ability.setName("Einstich Harpoon");
		ability.setDescription("The Einstich Harpoon Gun is a long range, highly accurate weapon that will hook your ship into the enemy. It brings you into the same area as them (TODO).");
		ability.setAbilityType(AbilityType.HARPOON);
		ability.setRange(RangeType.LONG);
		ability.setAccBuff(Ability.BUFF_STANDARD);
		ability.setDefenseBuff(-Ability.BUFF_STANDARD);
		ability.setCooldown(3);

		ability = addCategories(ability, AbilityCategory.ACC_BUFF, AbilityCategory.HARPOON);


		return ability;
	}

	/**
	 * Sets up a OVERDRIVE ability
	 * Cancels emp, cool down for 3 turns, buffs ACC, debuffs DEF drastically
	 * @return {@link Ability}
	 */
	public static Ability overdriveAbility() {
		Ability ability = new Ability();

		ability.setId(Ability.OVERDRIVE);
		ability.setName("Engine Overdrive");
		ability.setDescription("Pushing your ship to the limits, your gears will grind to its maximum. Your defenses are a lot more sensitive, but your accuracy greatly improves and all EMP effects are reverted.");
		ability.setAbilityType(AbilityType.CANCEL_EMP);
		ability.setCooldown(3);
		ability.setDefenseBuff(-Ability.BUFF_STANDARD);
		ability.setAccBuff(Ability.BUFF_MAJOR);
		ability.setRange(RangeType.ANY);

		ability = addCategories(ability, AbilityCategory.ACC_BUFF, AbilityCategory.KILL_STUN);

		return ability;
	}

}