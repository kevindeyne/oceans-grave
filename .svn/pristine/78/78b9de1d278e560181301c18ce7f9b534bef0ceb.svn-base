package com.cardprototype.bootstrap.pool;

import java.util.ArrayList;
import java.util.List;

import com.cardprototype.core.domain.Enemy;
import com.cardprototype.core.domain.Player;
import com.cardprototype.core.domain.ability.Ability;

/**
 * A pool is a singleton factory that can produce or find generated or in-memory instances
 *
 * This specific class handles {@link Enemy}
 *
 * @author Kevin Deyne
 */
public class EnemyPool {

	private static EnemyPool pool;

	/**
	 * Private constructor ensures Singleton usage
	 */
	private EnemyPool(){

	}

	/**
	 * Retrieves the Singleton pool
	 * @return {@link EnemyPool}
	 */
	public static EnemyPool getEnemyPool(){
		if(pool == null){
			pool = new EnemyPool();
		}

		return pool;
	}

	/**
	 * Generates a new basic enemy for a player
	 * @param playerId
	 * @return newly generated {@link Enemy}, unpersisted
	 */
	public Enemy generateNewEnemy(String playerId){

		Enemy enemy = new Enemy();

		enemy.setName("Enemy");
		enemy.setHealth(200);
		enemy.setId(Enemy.EXAMPLE_ID);

		Player player = new Player();
		player.setId(Player.EXAMPLE_ID);
		enemy.setPlayer(player);

		List<String> enemyAbilities = new ArrayList<String>();
		List<Ability> starterAbilities = AbilityPool.getAbilityPool().getStartAbilities();
		for(Ability ability : starterAbilities){
			enemyAbilities.add(ability.getId());
		}
		enemy.setAbilities(enemyAbilities);

		return enemy;
	}
}
